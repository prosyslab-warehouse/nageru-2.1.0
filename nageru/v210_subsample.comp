#version 150
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable

layout(local_size_x=2, local_size_y=16) in;
layout(r16) uniform restrict readonly image2D in_y;
uniform sampler2D in_cbcr;  // Of type RG16.
layout(rgb10_a2) uniform restrict writeonly image2D outbuf;
uniform float inv_width, inv_height;

void main()
{
	int xb = int(gl_GlobalInvocationID.x);  // X block number.
	int y = int(gl_GlobalInvocationID.y);  // Y (actual line).
	float yf = (gl_GlobalInvocationID.y + 0.5f) * inv_height;  // Y float coordinate.

	// Load and scale CbCr values, sampling in-between the texels to get
	// to (left/4 + center/2 + right/4).
	vec2 pix_cbcr[3];
	for (int i = 0; i < 3; ++i) {
		vec2 a = texture(in_cbcr, vec2((xb * 6 + i * 2) * inv_width, yf)).xy;
		vec2 b = texture(in_cbcr, vec2((xb * 6 + i * 2 + 1) * inv_width, yf)).xy;
		pix_cbcr[i] = (a + b) * (0.5 * 65535.0 / 1023.0);
	}

	// Load and scale the Y values. Note that we use integer coordinates here,
	// so we don't need to offset by 0.5.
	float pix_y[6];
	for (int i = 0; i < 6; ++i) {
		pix_y[i] = imageLoad(in_y, ivec2(xb * 6 + i, y)).x * (65535.0 / 1023.0);
	}

	imageStore(outbuf, ivec2(xb * 4 + 0, y), vec4(pix_cbcr[0].x, pix_y[0],      pix_cbcr[0].y, 1.0));
	imageStore(outbuf, ivec2(xb * 4 + 1, y), vec4(pix_y[1],      pix_cbcr[1].x, pix_y[2],      1.0));
	imageStore(outbuf, ivec2(xb * 4 + 2, y), vec4(pix_cbcr[1].y, pix_y[3],      pix_cbcr[2].x, 1.0));
	imageStore(outbuf, ivec2(xb * 4 + 3, y), vec4(pix_y[4],      pix_cbcr[2].y, pix_y[5],      1.0));
}
